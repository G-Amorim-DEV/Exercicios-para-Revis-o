Função BUSCA_EM_LARGURA(grafo, inicio):
    n ← tamanho do grafo
    visitados ← vetor de tamanho n com todos os valores FALSO
    distancias ← vetor de tamanho n com todos os valores -1
    fila ← lista contendo apenas o vértice 'inicio'
    visitados[inicio] ← VERDADEIRO
    distancias[inicio] ← 0

    Enquanto fila não estiver vazia:
        vertice ← remover primeiro elemento da fila

        Para vizinho de 0 até n - 1:
            Se grafo[vertice][vizinho] = 1 E visitados[vizinho] = FALSO:
                visitados[vizinho] ← VERDADEIRO
                adicionar vizinho ao final da fila
                distancias[vizinho] ← distancias[vertice] + 1

    Retornar distancias

Função MAIOR_DISTANCIA(grafo):
    n ← tamanho do grafo
    maior_dist ← 0

    Para i de 0 até n - 1:
        distancias ← BUSCA_EM_LARGURA(grafo, i)

        Para cada dist em distancias:
            Se dist > maior_dist:
                maior_dist ← dist

    Retornar maior_dist

Início do Programa:

Exibir "Digite 1 - Para o Grafo_Matriz1."
Exibir "Digite 2 - Para o Grafo_Matriz2."
Exibir "Digite 3 - Para o Grafo_Matriz3."

lista_desejada ← Ler entrada do usuário como número inteiro

Se lista_desejada = 1:
    maior ← MAIOR_DISTANCIA(Grafo_Matriz1)
    Exibir Grafo_Matriz1
    Exibir "A maior distância de Grafo_Matriz1 é", maior

Senão se lista_desejada = 2:
    maior ← MAIOR_DISTANCIA(Grafo_Matriz2)
    Exibir Grafo_Matriz2
    Exibir "A maior distância de Grafo_Matriz2 é", maior

Senão se lista_desejada = 3:
    maior ← MAIOR_DISTANCIA(Grafo_Matriz3)
    Exibir Grafo_Matriz3
    Exibir "A maior distância de Grafo_Matriz3 é", maior

Senão:
    Exibir "O número digitado não corresponde a nenhum grafo."
                                            Fim do Programa
